{
  "problems": [
    {
      "id": "two-sum",
      "title": "Two Sum",
      "difficulty": "Easy",
      "category": "Arrays",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
      "examples": [
        {
          "input": "nums = [2,7,11,15], target = 9",
          "output": "[0,1]",
          "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
        },
        {
          "input": "nums = [3,2,4], target = 6",
          "output": "[1,2]"
        }
      ],
      "constraints": [
        "2 <= nums.length <= 10^4",
        "-10^9 <= nums[i] <= 10^9",
        "-10^9 <= target <= 10^9",
        "Only one valid answer exists."
      ],
      "hints": [
        "Try using a hash map to store values you've seen",
        "For each number, check if its complement (target - number) exists in the hash map",
        "Don't forget to handle the case where the same element can't be used twice"
      ],
      "starter_code": {
        "python": "def twoSum(nums, target):\n    # Your code here\n    pass",
        "javascript": "function twoSum(nums, target) {\n    // Your code here\n}",
        "java": "public int[] twoSum(int[] nums, int target) {\n    // Your code here\n}",
        "cpp": "vector<int> twoSum(vector<int>& nums, int target) {\n    // Your code here\n}"
      }
    },
    {
      "id": "valid-parentheses",
      "title": "Valid Parentheses",
      "difficulty": "Easy",
      "category": "Stack",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
      "examples": [
        {
          "input": "s = \"()\"",
          "output": "true"
        },
        {
          "input": "s = \"()[]{}\"",
          "output": "true"
        },
        {
          "input": "s = \"(]\"",
          "output": "false"
        }
      ],
      "constraints": [
        "1 <= s.length <= 10^4",
        "s consists of parentheses only '()[]{}'."
      ],
      "hints": [
        "Use a stack data structure",
        "Push opening brackets onto the stack",
        "When you see a closing bracket, check if it matches the most recent opening bracket"
      ],
      "starter_code": {
        "python": "def isValid(s):\n    # Your code here\n    pass",
        "javascript": "function isValid(s) {\n    // Your code here\n}",
        "java": "public boolean isValid(String s) {\n    // Your code here\n}",
        "cpp": "bool isValid(string s) {\n    // Your code here\n}"
      }
    },
    {
      "id": "reverse-linked-list",
      "title": "Reverse Linked List",
      "difficulty": "Easy",
      "category": "Linked List",
      "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
      "examples": [
        {
          "input": "head = [1,2,3,4,5]",
          "output": "[5,4,3,2,1]"
        },
        {
          "input": "head = [1,2]",
          "output": "[2,1]"
        },
        {
          "input": "head = []",
          "output": "[]"
        }
      ],
      "constraints": [
        "The number of nodes in the list is the range [0, 5000].",
        "-5000 <= Node.val <= 5000"
      ],
      "hints": [
        "Think about using three pointers: previous, current, and next",
        "You need to reverse the direction of each link",
        "Don't forget to handle the edge case of an empty list"
      ],
      "starter_code": {
        "python": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):\n    # Your code here\n    pass",
        "javascript": "// Definition for singly-linked list.\nfunction ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction reverseList(head) {\n    // Your code here\n}",
        "java": "// Definition for singly-linked list.\npublic class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\npublic ListNode reverseList(ListNode head) {\n    // Your code here\n}",
        "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nListNode* reverseList(ListNode* head) {\n    // Your code here\n}"
      }
    },
    {
      "id": "maximum-subarray",
      "title": "Maximum Subarray",
      "difficulty": "Medium",
      "category": "Dynamic Programming",
      "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\n\nA subarray is a contiguous non-empty sequence of elements within an array.",
      "examples": [
        {
          "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
          "output": "6",
          "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
        },
        {
          "input": "nums = [1]",
          "output": "1"
        },
        {
          "input": "nums = [5,4,-1,7,8]",
          "output": "23"
        }
      ],
      "constraints": [
        "1 <= nums.length <= 10^5",
        "-10^4 <= nums[i] <= 10^4"
      ],
      "hints": [
        "This is a classic dynamic programming problem (Kadane's algorithm)",
        "At each position, decide whether to extend the current subarray or start a new one",
        "Keep track of the maximum sum seen so far"
      ],
      "starter_code": {
        "python": "def maxSubArray(nums):\n    # Your code here\n    pass",
        "javascript": "function maxSubArray(nums) {\n    // Your code here\n}",
        "java": "public int maxSubArray(int[] nums) {\n    // Your code here\n}",
        "cpp": "int maxSubArray(vector<int>& nums) {\n    // Your code here\n}"
      }
    },
    {
      "id": "binary-tree-inorder",
      "title": "Binary Tree Inorder Traversal",
      "difficulty": "Easy",
      "category": "Tree",
      "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n\nInorder traversal visits nodes in this order: left subtree, root, right subtree.",
      "examples": [
        {
          "input": "root = [1,null,2,3]",
          "output": "[1,3,2]"
        },
        {
          "input": "root = []",
          "output": "[]"
        },
        {
          "input": "root = [1]",
          "output": "[1]"
        }
      ],
      "constraints": [
        "The number of nodes in the tree is in the range [0, 100].",
        "-100 <= Node.val <= 100"
      ],
      "hints": [
        "Try both recursive and iterative approaches",
        "For iterative: use a stack to simulate the recursive call stack",
        "Remember the order: left, root, right"
      ],
      "starter_code": {
        "python": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorderTraversal(root):\n    # Your code here\n    pass",
        "javascript": "// Definition for a binary tree node.\nfunction TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction inorderTraversal(root) {\n    // Your code here\n}",
        "java": "// Definition for a binary tree node.\npublic class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\npublic List<Integer> inorderTraversal(TreeNode root) {\n    // Your code here\n}",
        "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nvector<int> inorderTraversal(TreeNode* root) {\n    // Your code here\n}"
      }
    },
    {
      "id": "climbing-stairs",
      "title": "Climbing Stairs",
      "difficulty": "Easy",
      "category": "Dynamic Programming",
      "description": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
      "examples": [
        {
          "input": "n = 2",
          "output": "2",
          "explanation": "There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
        },
        {
          "input": "n = 3",
          "output": "3",
          "explanation": "There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        }
      ],
      "constraints": [
        "1 <= n <= 45"
      ],
      "hints": [
        "This is similar to the Fibonacci sequence",
        "To reach step n, you can come from step n-1 or step n-2",
        "Think about the base cases: what about n=1 and n=2?"
      ],
      "starter_code": {
        "python": "def climbStairs(n):\n    # Your code here\n    pass",
        "javascript": "function climbStairs(n) {\n    // Your code here\n}",
        "java": "public int climbStairs(int n) {\n    // Your code here\n}",
        "cpp": "int climbStairs(int n) {\n    // Your code here\n}"
      }
    },
    {
      "id": "merge-intervals",
      "title": "Merge Intervals",
      "difficulty": "Medium",
      "category": "Arrays",
      "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
      "examples": [
        {
          "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
          "output": "[[1,6],[8,10],[15,18]]",
          "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
        },
        {
          "input": "intervals = [[1,4],[4,5]]",
          "output": "[[1,5]]",
          "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
        }
      ],
      "constraints": [
        "1 <= intervals.length <= 10^4",
        "intervals[i].length == 2",
        "0 <= starti <= endi <= 10^4"
      ],
      "hints": [
        "Sort the intervals by their start times first",
        "Iterate through sorted intervals and merge overlapping ones",
        "Two intervals overlap if the start of one is <= the end of the other"
      ],
      "starter_code": {
        "python": "def merge(intervals):\n    # Your code here\n    pass",
        "javascript": "function merge(intervals) {\n    // Your code here\n}",
        "java": "public int[][] merge(int[][] intervals) {\n    // Your code here\n}",
        "cpp": "vector<vector<int>> merge(vector<vector<int>>& intervals) {\n    // Your code here\n}"
      }
    },
    {
      "id": "longest-palindrome",
      "title": "Longest Palindromic Substring",
      "difficulty": "Medium",
      "category": "String",
      "description": "Given a string s, return the longest palindromic substring in s.\n\nA palindrome is a string that reads the same forward and backward.",
      "examples": [
        {
          "input": "s = \"babad\"",
          "output": "\"bab\"",
          "explanation": "Note that \"aba\" is also a valid answer."
        },
        {
          "input": "s = \"cbbd\"",
          "output": "\"bb\""
        }
      ],
      "constraints": [
        "1 <= s.length <= 1000",
        "s consist of only digits and English letters."
      ],
      "hints": [
        "Try the 'expand around centers' approach",
        "For each character, expand around it to find the longest palindrome",
        "Remember to handle both odd-length and even-length palindromes"
      ],
      "starter_code": {
        "python": "def longestPalindrome(s):\n    # Your code here\n    pass",
        "javascript": "function longestPalindrome(s) {\n    // Your code here\n}",
        "java": "public String longestPalindrome(String s) {\n    // Your code here\n}",
        "cpp": "string longestPalindrome(string s) {\n    // Your code here\n}"
      }
    },
    {
      "id": "binary-search",
      "title": "Binary Search",
      "difficulty": "Easy",
      "category": "Binary Search",
      "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.",
      "examples": [
        {
          "input": "nums = [-1,0,3,5,9,12], target = 9",
          "output": "4",
          "explanation": "9 exists in nums and its index is 4"
        },
        {
          "input": "nums = [-1,0,3,5,9,12], target = 2",
          "output": "-1",
          "explanation": "2 does not exist in nums so return -1"
        }
      ],
      "constraints": [
        "1 <= nums.length <= 10^4",
        "-10^4 < nums[i], target < 10^4",
        "All the integers in nums are unique.",
        "nums is sorted in ascending order."
      ],
      "hints": [
        "Use the divide and conquer approach",
        "Compare the target with the middle element",
        "Be careful with the boundary conditions to avoid infinite loops"
      ],
      "starter_code": {
        "python": "def search(nums, target):\n    # Your code here\n    pass",
        "javascript": "function search(nums, target) {\n    // Your code here\n}",
        "java": "public int search(int[] nums, int target) {\n    // Your code here\n}",
        "cpp": "int search(vector<int>& nums, int target) {\n    // Your code here\n}"
      }
    },
    {
      "id": "kth-largest",
      "title": "Kth Largest Element in an Array",
      "difficulty": "Medium",
      "category": "Heap",
      "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\n\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\n\nCan you solve it without sorting?",
      "examples": [
        {
          "input": "nums = [3,2,1,5,6,4], k = 2",
          "output": "5"
        },
        {
          "input": "nums = [3,2,3,1,2,4,5,5,6], k = 4",
          "output": "4"
        }
      ],
      "constraints": [
        "1 <= k <= nums.length <= 10^5",
        "-10^4 <= nums[i] <= 10^4"
      ],
      "hints": [
        "Consider using a min-heap of size k",
        "You could also use QuickSelect algorithm",
        "Think about the time complexity of different approaches"
      ],
      "starter_code": {
        "python": "def findKthLargest(nums, k):\n    # Your code here\n    pass",
        "javascript": "function findKthLargest(nums, k) {\n    // Your code here\n}",
        "java": "public int findKthLargest(int[] nums, int k) {\n    // Your code here\n}",
        "cpp": "int findKthLargest(vector<int>& nums, int k) {\n    // Your code here\n}"
      }
    }
  ]
}